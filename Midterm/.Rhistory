map(~ data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>%
extract2(input$response_variable) - data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>% extract2(input$response_variable) %>% mean) %>%
unlist
})
factor_means <- reactive({ data() %>% extract2(input$factor_variable) %>% unique %>%
map(~data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>%
extract2(input$response_variable) %>% mean) %>%
unlist
})
fitted_values <- reactive({
factor_lengths <- data() %>% extract2(input$factor_variable) %>% levels %>% map_int(~data()%>%
filter(!!as.symbol(input$factor == .x) %>%
extract2(input$factor_variable) %>% length))
fitted_values <- data() %>% extract2(input$factor_variable) %>% levels %>% map_dbl(~rep(factor_means[.x],factor_lengths[.x]))
#c(rep(factor_means()[1],),rep(factor_means()[2],14),rep(factor_means()[3],15),rep(factor_means()[4],14))
})
residuals_standard <- reactive({
residuals_standard <- residuals() -(residuals() %>% mean)
residuals_standard <- residuals_standard/residuals() %>% sd
})
output$qq_plot <- renderPlotly({
ggplot(mapping = aes(sample = residuals_standard())) + geom_qq()+geom_qq_line(col = 2)+labs(title = "Normal Q-Q Plot")+xlab("Theoretical Quantiles")+ylab("Sample Quantiles")+theme_bw()+theme(panel.grid = element_blank())
})
observeEvent(input$transformation,{
if(input$transformation == "log"){
data() %<>% mutate(input$response_variable = input$response_variable %>% log)
library(dplyr)
library(purrr)
library(magrittr)
library(ggplot2)
library(shiny)
library(plotly)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Residual Analysis"),
dashboardSidebar(fileInput("select_data","Select Data"),
selectInput("response_variable","Choose Response Variable",choices = c()),
selectInput("factor_variable","Choose Factor Variable",choices = c()),
selectInput("transformation","Transform Response Variable",choices = c("None","log","2","inverse")),
actionButton("reset_transformation","Reset Transformation")),
dashboardBody(
fluidRow(
box( plotlyOutput("residual_plot"),
plotlyOutput("qq_plot"))
)
)
)
server <- function(input,output,session){
data <- reactive({
data_object <- input$select_data
print(data_object$datapath )
if(length(data_object$datapath) != 0){
data <- read.table(data_object$datapath,header = TRUE)
}
})
observeEvent(data(),{
updateSelectInput(session,"response_variable",choices = colnames(data()))
})
observeEvent(data(),{
updateSelectInput(session,"factor_variable",choices = colnames(data()))
})
residuals <- reactive({
data() %>% extract2(input$factor_variable) %>% unique %>%
map(~ data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>%
extract2(input$response_variable) - data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>% extract2(input$response_variable) %>% mean) %>%
unlist
})
factor_means <- reactive({ data() %>% extract2(input$factor_variable) %>% unique %>%
map(~data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>%
extract2(input$response_variable) %>% mean) %>%
unlist
})
fitted_values <- reactive({
factor_lengths <- data() %>% extract2(input$factor_variable) %>% levels %>% map_int(~data()%>%
filter(!!as.symbol(input$factor == .x) %>%
extract2(input$factor_variable) %>% length))
fitted_values <- data() %>% extract2(input$factor_variable) %>% levels %>% map_dbl(~rep(factor_means[.x],factor_lengths[.x]))
#c(rep(factor_means()[1],),rep(factor_means()[2],14),rep(factor_means()[3],15),rep(factor_means()[4],14))
})
residuals_standard <- reactive({
residuals_standard <- residuals() -(residuals() %>% mean)
residuals_standard <- residuals_standard/residuals() %>% sd
})
output$qq_plot <- renderPlotly({
ggplot(mapping = aes(sample = residuals_standard())) + geom_qq()+geom_qq_line(col = 2)+labs(title = "Normal Q-Q Plot")+xlab("Theoretical Quantiles")+ylab("Sample Quantiles")+theme_bw()+theme(panel.grid = element_blank())
})
# observeEvent(input$transformation,{
#  if(input$transformation == "log"){
#
#      data() %<>% mutate(input$response_variable = input$response_variable %>% log)
#  }
#     else if(input$transformation == "2"){
#      data() %<>% mutate(input$response_variable = input$response_variable %>% exp(2))
#     }
#     else if(input$transformation == "inverse"){
#      data() %<>% mutate(input$response_variable = 1/input$response_variable)
#     }
#
#
# })
observeEvent("reset_transformation",{
updateSelectInput(session,"transformation",selected = "None")
data <- reactive({
data_object <- input$select_data
print(data_object$datapath )
if(length(data_object$datapath) != 0){
data <- read.table(data_object$datapath,header = TRUE)
}
})
})
output$residual_plot <- renderPlotly({
ggplot(data(),aes(x = fitted_values(),y = residuals(),color = !!as.symbol(input$factor_variable))) + geom_point()+
scale_color_manual(values = data() %>% extract2(input$factor_variable) %>% unique,labels = data() %>% extract2(input$factor_variable) %>% unique %>% toupper)+xlab("Fitted Values")+ylab("Residuals")
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(purrr)
library(magrittr)
library(ggplot2)
library(shiny)
library(plotly)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Residual Analysis"),
dashboardSidebar(fileInput("select_data","Select Data"),
selectInput("response_variable","Choose Response Variable",choices = c()),
selectInput("factor_variable","Choose Factor Variable",choices = c()),
selectInput("transformation","Transform Response Variable",choices = c("None","log","2","inverse")),
actionButton("reset_transformation","Reset Transformation")),
dashboardBody(
fluidRow(
box( plotlyOutput("residual_plot"),
plotlyOutput("qq_plot"))
)
)
)
server <- function(input,output,session){
data <- reactive({
data_object <- input$select_data
print(data_object$datapath )
if(length(data_object$datapath) != 0){
data <- read.table(data_object$datapath,header = TRUE)
}
})
observeEvent(data(),{
updateSelectInput(session,"response_variable",choices = colnames(data()))
})
observeEvent(data(),{
updateSelectInput(session,"factor_variable",choices = colnames(data()))
})
residuals <- reactive({
data() %>% extract2(input$factor_variable) %>% unique %>%
map(~ data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>%
extract2(input$response_variable) - data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>% extract2(input$response_variable) %>% mean) %>%
unlist
})
factor_means <- reactive({ data() %>% extract2(input$factor_variable) %>% unique %>%
map(~data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>%
extract2(input$response_variable) %>% mean) %>%
unlist
})
fitted_values <- reactive({
factor_lengths <- data() %>% extract2(input$factor_variable) %>% levels %>% map_int(~data()%>%
filter(!!as.symbol(input$factor == .x) %>%
extract2(input$factor_variable) %>% length))
fitted_values <- data() %>% extract2(input$factor_variable) %>% levels %>% map_dbl(~rep(factor_means[.x],factor_lengths[.x]))
#c(rep(factor_means()[1],),rep(factor_means()[2],14),rep(factor_means()[3],15),rep(factor_means()[4],14))
})
residuals_standard <- reactive({
residuals_standard <- residuals() -(residuals() %>% mean)
residuals_standard <- residuals_standard/residuals() %>% sd
})
output$qq_plot <- renderPlotly({
ggplot(mapping = aes(sample = residuals_standard())) + geom_qq()+geom_qq_line(col = 2)+labs(title = "Normal Q-Q Plot")+xlab("Theoretical Quantiles")+ylab("Sample Quantiles")+theme_bw()+theme(panel.grid = element_blank())
})
# observeEvent(input$transformation,{
#  if(input$transformation == "log"){
#
#      data() %<>% mutate(input$response_variable = input$response_variable %>% log)
#  }
#     else if(input$transformation == "2"){
#      data() %<>% mutate(input$response_variable = input$response_variable %>% exp(2))
#     }
#     else if(input$transformation == "inverse"){
#      data() %<>% mutate(input$response_variable = 1/input$response_variable)
#     }
#
#
# })
observeEvent("reset_transformation",{
updateSelectInput(session,"transformation",selected = "None")
data <- reactive({
data_object <- input$select_data
print(data_object$datapath )
if(length(data_object$datapath) != 0){
data <- read.table(data_object$datapath,header = TRUE)
}
})
})
output$residual_plot <- renderPlotly({
print(fitted_values())
ggplot(data(),aes(x = fitted_values(),y = residuals(),color = !!as.symbol(input$factor_variable))) + geom_point()+
scale_color_manual(values = data() %>% extract2(input$factor_variable) %>% unique,labels = data() %>% extract2(input$factor_variable) %>% unique %>% toupper)+xlab("Fitted Values")+ylab("Residuals")
})
}
shinyApp(ui = ui, server = server)
library(dplyr)
library(purrr)
library(magrittr)
library(ggplot2)
library(shiny)
library(plotly)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Residual Analysis"),
dashboardSidebar(fileInput("select_data","Select Data"),
selectInput("response_variable","Choose Response Variable",choices = c()),
selectInput("factor_variable","Choose Factor Variable",choices = c()),
selectInput("transformation","Transform Response Variable",choices = c("None","log","2","inverse")),
actionButton("reset_transformation","Reset Transformation")),
dashboardBody(
fluidRow(
box( plotlyOutput("residual_plot"),
plotlyOutput("qq_plot"))
)
)
)
server <- function(input,output,session){
data <- reactive({
data_object <- input$select_data
print(data_object$datapath )
if(length(data_object$datapath) != 0){
data <- read.table(data_object$datapath,header = TRUE)
}
})
observeEvent(data(),{
updateSelectInput(session,"response_variable",choices = colnames(data()))
})
observeEvent(data(),{
updateSelectInput(session,"factor_variable",choices = colnames(data()))
})
residuals <- reactive({
data() %>% extract2(input$factor_variable) %>% unique %>%
map(~ data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>%
extract2(input$response_variable) - data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>% extract2(input$response_variable) %>% mean) %>%
unlist
})
factor_means <- reactive({ data() %>% extract2(input$factor_variable) %>% unique %>%
map(~data() %>%
filter(!!as.symbol(input$factor_variable) == .x) %>%
extract2(input$response_variable) %>% mean) %>%
unlist
})
fitted_values <- reactive({
factor_lengths <- data() %>% extract2(input$factor_variable) %>% levels %>% map_int(~data()%>%
filter(!!as.symbol(input$factor == .x) %>%
extract2(input$factor_variable) %>% length))
print(factor_lengths)
print(factor_means())
fitted_values <- data() %>% extract2(input$factor_variable) %>% levels %>% map_dbl(~rep(factor_means[.x],factor_lengths[.x]))
#c(rep(factor_means()[1],),rep(factor_means()[2],14),rep(factor_means()[3],15),rep(factor_means()[4],14))
})
residuals_standard <- reactive({
residuals_standard <- residuals() -(residuals() %>% mean)
residuals_standard <- residuals_standard/residuals() %>% sd
})
output$qq_plot <- renderPlotly({
ggplot(mapping = aes(sample = residuals_standard())) + geom_qq()+geom_qq_line(col = 2)+labs(title = "Normal Q-Q Plot")+xlab("Theoretical Quantiles")+ylab("Sample Quantiles")+theme_bw()+theme(panel.grid = element_blank())
})
# observeEvent(input$transformation,{
#  if(input$transformation == "log"){
#
#      data() %<>% mutate(input$response_variable = input$response_variable %>% log)
#  }
#     else if(input$transformation == "2"){
#      data() %<>% mutate(input$response_variable = input$response_variable %>% exp(2))
#     }
#     else if(input$transformation == "inverse"){
#      data() %<>% mutate(input$response_variable = 1/input$response_variable)
#     }
#
#
# })
observeEvent("reset_transformation",{
updateSelectInput(session,"transformation",selected = "None")
data <- reactive({
data_object <- input$select_data
print(data_object$datapath )
if(length(data_object$datapath) != 0){
data <- read.table(data_object$datapath,header = TRUE)
}
})
})
output$residual_plot <- renderPlotly({
ggplot(data(),aes(x = fitted_values(),y = residuals(),color = !!as.symbol(input$factor_variable))) + geom_point()+
scale_color_manual(values = data() %>% extract2(input$factor_variable) %>% unique,labels = data() %>% extract2(input$factor_variable) %>% unique %>% toupper)+xlab("Fitted Values")+ylab("Residuals")
})
}
shinyApp(ui = ui, server = server)
tread_brands %>% str
tread_brands$Brand %>% as.numeric()
tread_brands %>% str
tread_brands %<>% as.numeric(levels(tread_brands$Brand))[tread_brands$Brand]
tread_brands %<>% as.numeric(levels(tread_brands$Brand))
tread_brands$Brand %<>% as.numeric(levels(tread_brands$Brand))
tread_brands %>% str
tread_brands$Brand %>% levels
tread_brands$Brand %<>% as.numeric(levels(tread_brands$Brand))
tread_brands %>% str
tread_brands$"Brand"
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
tread_brands %>% as.character()
tread_brands[,as.character]
tread_brands[,is.character]
tread_brands %>% apply(FUN = is.numeric())
tread_brands %>% apply(FUN = is.numeric(X))
tread_brands %>% apply(FUN = is.numeric(tread_brands))
tread_brands %>% apply(FUN = is.numeric)
tread_brands %>% lapply(is_numeric)
tread_brands %>% sapply(is_numeric)
tread_brands %>% sapply(is_numeric) %>% str
tread_brands %>% vapply(is_numeric) %>% str
tread_brands %>% sapply(is_numeric) %>% str
tread_brands %>% sapply(is_numeric) %>% extract2(1)
tread_brands[,which(is.numeric)]
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
?rep
rep(c(5,4,5),c(1,2,3))
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
dotchart(tread_brands$Brand)
plot(tread_brands$Brand,tread_brands$TreadLife)
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
View(tread_brands)
ggplot(tread_brands,aes(x = !!as.symbol("Brand"),y = !!as.symbol("TreadLife")))+geom_dotplot()
View(tread_brands)
ggplot(tread_brands,aes(x = !!as.symbol("Brand"),y = !!as.symbol("TreadLife")))+geom_dotplot(binaxis = "y")
tread_brands$Brand
ggplot(tread_brands,aes(x = Brand,y = TreadLife))+geom_dotplot(binaxis = "y")
ggplot(tread_brands,aes(x = Brand,y = TreadLife))+geom_dotplot(binaxis = "x")
ggplot(tread_brands,aes(x = Brand,y = TreadLife))+geom_dotplot(binaxis = "x",stackdir = "center")
ggplot(tread_brands,aes(x = Brand,y = TreadLife))+geom_dotplot(binaxis = "x",stackdir = "center")
ggplot(tread_brands,aes(x = Brand,y = TreadLife))+geom_dotplot(binaxis = "y",stackdir = "center")
ggplot(tread_brands,aes(x = Brand %>% as.factor(),y = TreadLife))+geom_dotplot(binaxis = "y",stackdir = "center")
plot(tread_brands$Brand,tread_brands$TreadLife)
tread_brands$TreadLife
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
?ggplot
?aes
!!as.symbol("Brand")
tread_brands$!!as.symbol("Brand")
tread_brands$as.symbol("Brand")
"Brand" %>% as.symbol()
"Brand" %>% as.symbol() %>% str
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
?aes_string
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
ggplot(tread_brands,aes(x = Brand %>% as.factor(),y = TreadLife))+geom_dotplot(binaxis = "y",stackdir = "center")
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
library(dplyr)
library(purrr)
library(magrittr)
library(ggplot2)
library(shiny)
library(plotly)
library(shinydashboard)
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
?observe
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
?exp
?power
runApp('STA_106_MIdterm')
?square
c(1,2,3) %>% ^2
c(1,2,3) %>% multiply_by(c(1,2,3))
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
60^2
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
?eventReactive
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp()
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp()
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
runApp('STA_106_MIdterm')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='cposs2000',
token='F8F6ED5C13DBE361E0B52AD2AED53C3E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='cposs2000',
token='F8F6ED5C13DBE361E0B52AD2AED53C3E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='cposs2000',
token='F8F6ED5C13DBE361E0B52AD2AED53C3E',
secret='FnDnZBGBFrJjyeV+rVi4lBMuMqfWtVtrDSXQKp38')
library(rsconnect)
rsconnect::deployApp('/home/cam/Documents/STA 106/Midterm/midterm_template.rmd')
